ConcOxOut_ugL.sd = OxOut_ug.sd/Volday.L,
ConcEsOut_ugL.obs = EsOut_ug.obs/Volday.L, # Esa
ConcEsOut_ugL.sd = EsOut_ug.sd/Volday.L,
delta.obs = sum(MassDelta.obs)/(sum(SmetOut_ug.obs)),
delta.sd = (sum(MassDelta.sd^2))^0.5/(sum(SmetOut_ug.sd^2))^0.5
)
# Step 2
# Get all duplicated days with data
allDup = qmDay %>%
group_by(DayMoYr) %>%
filter(n()>1 & !is.na(SmOut_ug.obs))
# Do flow proportional average
qmBlkDup = allDup %>%
group_by(DayMoYr) %>%
dplyr::summarize(VolTot.L = sum(Volday.L),
TotHrs = sum(SmpHrs),
ConSmOut_ugL.blk = sum(ConcSmOut_ugL.obs * Volday.L)/sum(Volday.L),
ConSmOut_ugL.sd = sum(ConcSmOut_ugL.sd * Volday.L)/sum(Volday.L),
ConOxOut_ugL.blk = sum(ConcOxOut_ugL.obs * Volday.L)/sum(Volday.L),
ConOxOut_ugL.sd = sum(ConcOxOut_ugL.sd * Volday.L)/sum(Volday.L),
ConEsOut_ugL.blk = sum(ConcEsOut_ugL.obs * Volday.L)/sum(Volday.L),
ConEsOut_ugL.sd = sum(ConcEsOut_ugL.sd * Volday.L)/sum(Volday.L),
deltaOut.blk = sum(delta.obs * Volday.L)/sum(Volday.L),
deltaOut.sd =  sum(delta.sd * Volday.L)/sum(Volday.L)
)
# Removed rows - Only for reference (not used)
removed = qmDay %>%
group_by(DayMoYr) %>%
filter(n()>1 & is.na(SmOut_ug.obs))
removedBlk = removed %>%
group_by(DayMoYr) %>%
dplyr::summarize(VolTot.L = sum(Volday.L),
TotHrs = sum(SmpHrs),
ConSmOut_ugL.blk = sum(ConcSmOut_ugL.obs * Volday.L)/sum(Volday.L),
ConSmOut_ugL.sd = sum(ConcSmOut_ugL.sd * Volday.L)/sum(Volday.L),
ConOxOut_ugL.blk = sum(ConcOxOut_ugL.obs * Volday.L)/sum(Volday.L),
ConOxOut_ugL.sd = sum(ConcOxOut_ugL.sd * Volday.L)/sum(Volday.L),
ConEsOut_ugL.blk = sum(ConcEsOut_ugL.obs * Volday.L)/sum(Volday.L),
ConEsOut_ugL.sd = sum(ConcEsOut_ugL.sd * Volday.L)/sum(Volday.L),
deltaOut.blk = sum(delta.obs * Volday.L)/sum(Volday.L),
deltaOut.sd =  sum(delta.sd * Volday.L)/sum(Volday.L)
)
# Get all non-duplicated days. do average to get same variables
ndup = qmDay %>%
group_by(DayMoYr) %>%
filter(n()==1)
qmBlk_nDup = ndup %>%
group_by(DayMoYr) %>%
dplyr::summarize(VolTot.L = sum(Volday.L),
TotHrs = sum(SmpHrs),
ConSmOut_ugL.blk = sum(ConcSmOut_ugL.obs * Volday.L)/sum(Volday.L),
ConSmOut_ugL.sd = sum(ConcSmOut_ugL.sd * Volday.L)/sum(Volday.L),
ConOxOut_ugL.blk = sum(ConcOxOut_ugL.obs * Volday.L)/sum(Volday.L),
ConOxOut_ugL.sd = sum(ConcOxOut_ugL.sd * Volday.L)/sum(Volday.L),
ConEsOut_ugL.blk = sum(ConcEsOut_ugL.obs * Volday.L)/sum(Volday.L),
ConEsOut_ugL.sd = sum(ConcEsOut_ugL.sd * Volday.L)/sum(Volday.L),
deltaOut.blk = sum(delta.obs * Volday.L)/sum(Volday.L),
deltaOut.sd =  sum(delta.sd * Volday.L)/sum(Volday.L)
)
# Bind Bulk samples
qmBlk = rbind(qmBlkDup, qmBlk_nDup)
qmBlk90 = qmBlk %>%
filter(TotHrs >= 21.6)
qmBlk50 = qmBlk %>%
filter(TotHrs >= 12.0)
# Get dates/markers column
m <- q %>%
group_by(DayMoYr) %>%
dplyr::summarise(SubWeeks = SubWeeks[1])
qmBlk90_obs = merge(qmBlk90, m, by = "DayMoYr", all = T)
qmBlk50_obs = merge(qmBlk50, m, by = "DayMoYr", all = T)
qmBlk90_obs = qmBlk90_obs[order(qmBlk90_obs$DayMoYr), ]
qmBlk50_obs = qmBlk50_obs[order(qmBlk50_obs$DayMoYr), ]
# Natural log (ln) for low concentrations
qmBlk90$lnConSmOut_ugL.blk = log(qmBlk90$ConSmOut_ugL.blk)
mean(qmBlk90$ConSmOut_ugL.blk, na.rm = T)  # = 1.9897
mean(qmBlk90$lnConSmOut_ugL.blk, na.rm = T)  # -0.644
mean(qmBlk90$deltaOut.blk, na.rm = T)  # -30.52
qmBlk_mass = merge(qmBlk, m, by = "DayMoYr", all = T)
# Interpolate bulk concentrations to obtained a cumulative mass discharged
# Att:!!! not to use concentration as observation point, only as approximate loading totals
# Convert to grams (to match model output)
qmBlk_mass$MassSmOut_g = ((qmBlk_mass$ConSmOut_ugL.blk)/10**6)*qmBlk_mass$VolTot.L
qmBlk_mass$MassSmOut_g = ifelse(is.na(qmBlk_mass$MassSmOut_g), 0,
qmBlk_mass$MassSmOut_g)
qmBlk_mass$CumMassSmOut_g = cumsum(qmBlk_mass$MassSmOut_g)
### CALIBRATION DATA FRAME here!!
# Data frame for calibration (removed NAs)
qmBlk_cal = merge(qmBlk90, m, by = "DayMoYr", all = T)
qmBlk_cal$MassSmOut_g = ((qmBlk_cal$ConSmOut_ugL.blk)/10**6)*qmBlk_cal$VolTot.L
qmBlk_cal = subset(qmBlk_cal, !is.na(MassSmOut_g))
qmBlk90 = merge(time, qmBlk90, by = "DayMoYr", all = T)
qmBlk_mass = merge(time, qmBlk_mass, by = "DayMoYr", all = T)
# Calibration Sests
qmBlk90cal = merge(time, qmBlk_cal, by = "DayMoYr", all = T)
# Loads
loads_g_cal = subset(qmBlk90cal, !is.na(MassSmOut_g))
loads_g_cal = loads_g_cal[, c("Jdays", "MassSmOut_g")]
names(loads_g_cal) =  c("Jdays", "smloads.g")
# Concentration (outlet)
conc_out_cal = subset(qmBlk90cal, !is.na(ConSmOut_ugL.blk))
conc_out_cal = conc_out_cal[, c("Jdays", "ConSmOut_ugL.blk")]
names(conc_out_cal) = c("Jdays", "ug.L")
# Delta outlet
d13c_out_cal = subset(qmBlk90cal, !is.na(deltaOut.blk))
d13c_out_cal = d13c_out_cal[, c("Jdays", "deltaOut.blk")]
names(d13c_out_cal) = c("Jdays", "d13C")
if (F) {
# write.csv(qmBlk, "qmBlk_R.csv", row.names = F) # , sep = ";", dec = ".")
write.table(loads_g_cal, "BEACH_R/lds_out_cal.tss", sep="\t", row.names = F, col.names = T)
write.table(conc_out_cal, "BEACH_R/conc_out_cal.tss", sep="\t", row.names = F, col.names = T)
write.table(d13c_out_cal, "BEACH_R/d13c_out_cal.tss", sep="\t", row.names = F, col.names = T)
}
write.table(loads_g_cal, "BEACH_R/lds_out_cal.tss", sep="\t", row.names = F, col.names = T)
write.table(conc_out_cal, "BEACH_R/conc_out_cal.tss", sep="\t", row.names = F, col.names = T)
write.table(d13c_out_cal, "BEACH_R/d13c_out_cal.tss", sep="\t", row.names = F, col.names = T)
knitr::opts_chunk$set(echo = TRUE)
SAVE = F
MAC = T
WIN = F
if (MAC) {
if (WIN){
path = file.path("C:/Users/DayTimeChunks/Documents/PhD/HydrologicalMonitoring")
} else {
# path = file.path("/Users/DayTightChunks/Documents/PhD/HydrologicalMonitoring")
path = file.path("/Users/DayTightChunks/Documents/PhD/hydrological-monitoring")
time = read.csv2("/Users/DayTightChunks/Documents/PhD/Models/phd-model-master/Analysis/Data/Time.csv")
time$DayMoYr = as.POSIXct(strptime(time$Date, "%d/%m/%Y", tz="EST"))
}
} else {
path = file.path("D:/Documents/these_pablo/Alteckendorf2016/HydrologicalMonitoring")
time = read.csv2("D:/Documents/these_pablo/Models/BEACH2016/Analysis/Data/Time.csv")
time$DayMoYr = as.POSIXct(strptime(time$Date, "%d/%m/%Y", tz="EST"))
}
# Lab parameters and field constants
source(file.path(path, "global.R"))
soils = read.csv2(file.path(path, "Data/MassBalance_R.csv")) # Corrected with only ngC > 2.0
names(soils)
# soils$Date.ti <- as.POSIXct(soils$ti, "%Y-%m-%d %H:%M", tz = "EST")
soils$DayMoYr <- as.POSIXct(soils$ti, "%Y-%m-%d", tz = "EST")
#soils$Date.ti <- as.POSIXct(soils$Date.ti, "%d/%m/%Y %H:%M", tz = "EST")
#sum(is.na(soils$Date.ti))
soils$Blk.Conc = (
soils$MassSoil.g.North * soils$Conc.mug.g.dry.soil.N +
soils$MassSoil.g.Talweg * soils$Conc.mug.g.dry.soil.T +
soils$MassSoil.g.South * soils$Conc.mug.g.dry.soil.S)/(
soils$MassSoil.g.North + soils$MassSoil.g.Talweg + soils$MassSoil.g.South
)
soils$Blk.Conc.SD = (soils$Conc.mug.g.dry.soil.N + soils$Conc.mug.g.dry.soil.T + soils$Conc.mug.g.dry.soil.S)/3.0
View(soils)
soils = read.csv2(file.path(path, "Data/MassBalance_R.csv")) # Corrected with only ngC > 2.0
Sys.setlocale("LC_ALL", "English")
library("plyr")
library("dplyr")
# setwd("D:/Documents/these_pablo/Alteckendorf2016/R")
# setwd("/Users/DayTightChunks/Documents/PhD/Routput/Alteck/R")
# setwd("D:/Documents/these_pablo/Alteckendorf2016/00_TransparencyFolder")
getwd()
source("global.R")
outlet = read.csv2("Data/WeeklyHydroContam_R.csv", header = T)
outlet$ti <- as.POSIXct(outlet$ti, "%Y-%m-%d %H:%M", tz = "EST")
sum(is.na(outlet$ti))
names(outlet)
# Select variables from Water dataset
outlet <- outlet[, c("ti", "WeekSubWeek", "Event", "Duration.Hrs",
"timeSinceApp", "timeSinceApp.NoSo",
"timeSinceApp.N",  "timeSinceApp.T",  "timeSinceApp.S",
"diss.d13C", "SD.d13C",
"CumOutDiss.g", "CumOutFilt.g",
"TotSMout.g", "TotSMout.g.SD" ,
"MELsm.g", "MELsm.g.SD",
"Appl.Mass.g" , "Appl.Mass.g.OT",
"CumAppMass.g", "CumAppMass.g.N", "CumAppMass.g.T", "CumAppMass.g.S",
"CumAppMass.g.OT", "CumAppMass.g.N.OT", "CumAppMass.g.T.OT", "CumAppMass.g.S.OT",
"iniCo.ug.g.N",  "iniCo.ug.g.T", "iniCo.ug.g.S",
"CumOutSmeto.g", "CumOutMELsm.g")]
print("Water")
names(outlet)
soils = read.csv2("Data/WeeklySoils_Rng.csv", header =T) # Corrected with only ngC > 2.0
names(soils)
soils$Date.ti <- as.POSIXct(soils$Date.ti, "%Y-%m-%d %H:%M", tz = "EST")
#soils$Date.ti <- as.POSIXct(soils$Date.ti, "%d/%m/%Y %H:%M", tz = "EST")
sum(is.na(soils$Date.ti))
print("Soils")
str(soils)
# North
soils.N <- subset(soils, soils$Transect == "N")
soils.N <- soils.N[, c("Date.ti",
"MassSoil.g", "MassSoil.g.SD",
"Conc.mug.g.dry.soil", "Conc.ComSoil.SD",
"comp.d13C", "comp.d13C.SD", # "comp.d13C.SE",
"ID",
"Area.N", "Area.T", "Area.S" #,
# "Area_Nt", "Area_Tt", "Area_St"
)]
colnames(soils.N) <- c("ti",
"MassSoil.g.North", "MassSoil.g.SD.North",
"Conc.mug.g.dry.soil.N",  "Conc.North.SD",
"comp.d13C.North", "comp.d13C.SD.North", # "comp.d13C.SE.North",
"ID.N",
"Area.N", "Area.T", "Area.S"#,
#"Area.Nt", "Area.Tt", "Area.St"
)
# Talweg
soils.T <- subset(soils, soils$Transect == "T")
soils.T <- soils.T[, c("Date.ti",
"MassSoil.g", "MassSoil.g.SD",
"Conc.mug.g.dry.soil", "Conc.ComSoil.SD",
"comp.d13C", "comp.d13C.SD", # "comp.d13C.SE",
"ID")]
colnames(soils.T) <- c("ti",
"MassSoil.g.Talweg", "MassSoil.g.SD.Talweg",
"Conc.mug.g.dry.soil.T", "Conc.Talweg.SD",
"comp.d13C.Talweg", "comp.d13C.SD.Talweg", # "comp.d13C.SE.Talweg",
"ID.T" )
# South
soils.S <- subset(soils, soils$Transect == "S")
soils.S <- soils.S[, c("Date.ti",
"MassSoil.g", "MassSoil.g.SD",
"Conc.mug.g.dry.soil", "Conc.ComSoil.SD",
"comp.d13C", "comp.d13C.SD", # "comp.d13C.SE",
"ID" )]
colnames(soils.S) <- c("ti",
"MassSoil.g.South", "MassSoil.g.SD.South",
"Conc.mug.g.dry.soil.S", "Conc.South.SD",
"comp.d13C.South", "comp.d13C.SD.South", # "comp.d13C.SE.South",
"ID.S" )
View(soils.S)
library(zoo)
class(outlet$ti)
class(soils.T$ti)
soilsOut <- merge(outlet, soils.N, by = "ti", all = T)
soilsOut <- merge(soilsOut, soils.T, by = "ti", all = T)
soilsOut <- merge(soilsOut, soils.S, by = "ti", all = T)
soilsOut$DD13C.North <- soilsOut$comp.d13C.North - initialDelta
soilsOut$DD13C.Talweg <- soilsOut$comp.d13C.Talweg - initialDelta
soilsOut$DD13C.South <- soilsOut$comp.d13C.South - initialDelta
# Total mass in catchment
soilsOut$CatchMassSoil.g <-
soilsOut$MassSoil.g.North +
soilsOut$MassSoil.g.Talweg +
soilsOut$MassSoil.g.South
soilsOut$CatchMassSoil.g.SD <- (
( soilsOut$MassSoil.g.SD.North^2 +
soilsOut$MassSoil.g.SD.South^2 +
soilsOut$MassSoil.g.SD.Talweg^2
)/3
)^0.5
# Approximate initial mass for first 6 observation (before recording composite soils)
#soilsOut$CatchMassSoil.g[1:6] <- ifelse(is.na(soilsOut$CatchMassSoil.g),
#                                        soilsOut$CumAppMass.g-soilsOut$CumOutMELsm.g,
#                                        soilsOut$CatchMassSoil.g)
#soilsOut$BulkMass.g <-
#  soilsOut$MassSoil.g.North*(soilsOut$Area.N/(soilsOut$Area.N+soilsOut$Area.T+soilsOut$Area.S)) +
#  soilsOut$MassSoil.g.Talweg*(soilsOut$Area.T/(soilsOut$Area.N+soilsOut$Area.T+soilsOut$Area.S)) +
#  soilsOut$MassSoil.g.South*(soilsOut$Area.S/(soilsOut$Area.N+soilsOut$Area.T+soilsOut$Area.S))
# Bulk catchment isotopes
soilsOut$BulkCatch.d13 <-
(soilsOut$MassSoil.g.North/soilsOut$CatchMassSoil.g)*soilsOut$comp.d13C.North +
(soilsOut$MassSoil.g.Talweg/soilsOut$CatchMassSoil.g)*soilsOut$comp.d13C.Talweg +
(soilsOut$MassSoil.g.South/soilsOut$CatchMassSoil.g)*soilsOut$comp.d13C.South
soilsOut$BulkCatch.d13.SD <-
(soilsOut$MassSoil.g.North/soilsOut$CatchMassSoil.g)*soilsOut$comp.d13C.SD.North +
(soilsOut$MassSoil.g.Talweg/soilsOut$CatchMassSoil.g)*soilsOut$comp.d13C.SD.Talweg +
(soilsOut$MassSoil.g.South/soilsOut$CatchMassSoil.g)*soilsOut$comp.d13C.SD.South
soilsOut$DD13.Bulk <-  (soilsOut$BulkCatch.d13 - (d13Co))
# Bulk catchment concentrations
soilsOut$Area.Catchment <- soilsOut$Area.N + soilsOut$Area.T + soilsOut$Area.S
soilsOut$BulkCatch.Conc <-
(soilsOut$Area.N/soilsOut$Area.Catchment)*soilsOut$Conc.mug.g.dry.soil.N +
(soilsOut$Area.T/soilsOut$Area.Catchment)*soilsOut$Conc.mug.g.dry.soil.T +
(soilsOut$Area.S/soilsOut$Area.Catchment)*soilsOut$Conc.mug.g.dry.soil.S
soilsOut$iniCo.Bulk <-
soilsOut$iniCo.ug.g.N*(soilsOut$Area.N/soilsOut$Area.Catchment) +
soilsOut$iniCo.ug.g.T*(soilsOut$Area.T/soilsOut$Area.Catchment) +
soilsOut$iniCo.ug.g.S*(soilsOut$Area.S/soilsOut$Area.Catchment)
print("Merged Soils and Outlet by ti")
str(soilsOut)
write.csv2(soilsOut,
'Data/MassBalance_R.csv', row.names = F)
library("ggplot2")
library("scales")
library("reshape2")
library("cowplot")
# Melt data set
##Subset the necessary columns
soilsRemainMass <- soilsOut[, c("ti" ,"CumAppMass.g", "CumOutDiss.g", "CumOutFilt.g", "CumOutMELsm.g" , "CatchMassSoil.g")]
soilsRemainMass$CumAppMass.g[1:3] <- NA
# Replace Catchment Mass's NA with the most recent non-NA prior to it (assumes no degradation).
# Purpose: To match continuous outlet time array
soilsRemainMass$CatchMassSoil.g <- na.locf(soilsRemainMass$CatchMassSoil.g)
# soilsRemainMass <- na.omit(soilsRemainMass)
##Then rearrange your data frame
remainMassMolten = melt(soilsRemainMass, id=c("ti"))
# View(remainMassMolten)
pg <- remainMassMolten
# Change variable names:
levels(pg$variable)[levels(pg$variable)=="CumAppMass.g"] <- "Applied SM Cum. (Survey)"
levels(pg$variable)[levels(pg$variable)=="CumOutMELsm.g"] <- "MEL-SM Cum. (Outlet)"
levels(pg$variable)[levels(pg$variable)=="CatchMassSoil.g"] <- "Remaining SM (1cm Soil)"
levels(pg$variable)[levels(pg$variable)=="CumOutDiss.g"] <- "Dissolved SM Cum. (Outlet)"
levels(pg$variable)[levels(pg$variable)=="CumOutFilt.g"] <- "Sediment SM Cum. (Outlet)"
# Change the order:
levels(pg$variable)
pg$variable <- factor(pg$variable, levels = c("Applied SM Cum. (Survey)",  "Remaining SM (1cm Soil)", "MEL-SM Cum. (Outlet)", "Dissolved SM Cum. (Outlet)", "Sediment SM Cum. (Outlet)" ))
pgSimple <- pg[which(pg$variable != ("Dissolved SM Cum. (Outlet)") & pg$variable != ("Sediment SM Cum. (Outlet)")), ]
# names(pg)[names(pg)=="variable"]  <- "Estimated Mass"
massBalTop <- ggplot(pg) +
geom_line(aes(x=ti, y=value, group = variable, color=variable)) +
# Themes and axes
theme_bw() +
theme(# axis.text.x=element_text(angle = 45, hjust = 1),
axis.text.x=element_blank(),
axis.title.x=element_blank(),
legend.position="top"
)+
labs(color = "Estimated Mass") +
guides(col = guide_legend(ncol = 1)) +  # Sets legend parameters
# xlab("Date") +
scale_x_datetime(breaks = date_breaks("2 weeks"), labels = date_format("%b %d")) +
ylab(expression(paste("Mass ", {(g)}))) +
# scale_y_continuous(breaks = c(100, 5000, 10000, 20000), limits = c(100, 20000) )
scale_y_continuous(trans=log_trans(), breaks=c(1,5,10,50,100,500,1000,5000, 10000))
massBalTop
massBalBottom <- ggplot(pg) +
geom_line(aes(x=ti, y=value, color=variable)) +
# Themes and axes
theme_bw() +
theme(axis.text.x=element_text(angle = 45, hjust = 1),
#axis.text.x=element_blank(),
#axis.title.x=element_blank(),
legend.position="none"
)+
# guides(col = guide_legend(nrows = 2)) +  # Sets legend parameters
xlab("Date") +
scale_x_datetime(breaks = date_breaks("2 weeks"), labels = date_format("%b %d")) +
ylab(expression(paste("Mass. S-Meto.  ", {(g)}))) +
scale_y_continuous(breaks = c(1, 25, 50, 100), limits = c(0, 100) )
massBal = plot_grid(massBalTop, massBalBottom, ncol = 1, nrow = 2, align = "v")
massBal_MEL <- ggplot(pgSimple) +
geom_line(aes(x=ti, y=value, group = variable, color=variable)) +
# Themes and axes
theme_bw() +
theme(# axis.text.x=element_text(angle = 45, hjust = 1),
#axis.text.x=element_blank(),
#axis.title.x=element_blank(),
legend.position="top"
)+
labs(color = "Estimated Mass") +
guides(col = guide_legend(ncol = 3)) +  # Sets legend parameters
# xlab("Date") +
scale_x_datetime(breaks = date_breaks("2 weeks"), labels = date_format("%b %d")) +
ylab(expression(paste("Mass ", {(g)})))
massBal_MEL
soils = read.csv2(file.path(path, "Data/MassBalance_R.csv")) # Corrected with only ngC > 2.0
names(soils)
# soils$Date.ti <- as.POSIXct(soils$ti, "%Y-%m-%d %H:%M", tz = "EST")
soils$DayMoYr <- as.POSIXct(soils$ti, "%Y-%m-%d", tz = "EST")
#soils$Date.ti <- as.POSIXct(soils$Date.ti, "%d/%m/%Y %H:%M", tz = "EST")
#sum(is.na(soils$Date.ti))
soils$Blk.Conc = (
soils$MassSoil.g.North * soils$Conc.mug.g.dry.soil.N +
soils$MassSoil.g.Talweg * soils$Conc.mug.g.dry.soil.T +
soils$MassSoil.g.South * soils$Conc.mug.g.dry.soil.S)/(
soils$MassSoil.g.North + soils$MassSoil.g.Talweg + soils$MassSoil.g.South
)
soils$Blk.Conc.SD = (soils$Conc.mug.g.dry.soil.N + soils$Conc.mug.g.dry.soil.T + soils$Conc.mug.g.dry.soil.S)/3.0
View(soils)
soils$Blk.Conc.SD2 = var(soils[c("Conc.South.SD", "Conc.Talweg.SD")], na.rm=TRUE)
soils$Blk.Conc = (
soils$MassSoil.g.North * soils$Conc.mug.g.dry.soil.N +
soils$MassSoil.g.Talweg * soils$Conc.mug.g.dry.soil.T +
soils$MassSoil.g.South * soils$Conc.mug.g.dry.soil.S)/(
soils$MassSoil.g.North + soils$MassSoil.g.Talweg + soils$MassSoil.g.South
)
soils$Blk.Conc.SD = (soils$Conc.mug.g.dry.soil.N + soils$Conc.mug.g.dry.soil.T + soils$Conc.mug.g.dry.soil.S)/3.0
soils$Blk.Conc.SDmean = (soils$Conc.North.SD + soils$Conc.South.SD + soils$Conc.Talweg.SD)/3.0
soils$Blk.Conc.SDsd = ((
(soils$Conc.North.SD - soils$Blk.Conc.SDmean)**2 +
(soils$Conc.Talweg.SD - soils$Blk.Conc.SDmean)**2 +
(soils$Conc.South.SD - soils$Blk.Conc.SDmean)**2)/3.0)**0.5
soils$Blk.Conc.SD2 = (soils$Conc.North.SD**2 + soils$Conc.Talweg.SD**2 + soils$Conc.South.SD**2)**0.5
soils$Blk.Conc.mean =
(soils$Conc.mug.g.dry.soil.N + soils$Conc.mug.g.dry.soil.T + soils$Conc.mug.g.dry.soil.S)/3.0
soils$Blk.Conc.SDsd = ((
(soils$Conc.mug.g.dry.soil.N - soils$Blk.Conc.mean)**2 +
(soils$Conc.mug.g.dry.soil.T - soils$Blk.Conc.mean)**2 +
(soils$Conc.mug.g.dry.soil.S - soils$Blk.Conc.mean)**2)/3.0)**0.5
knitr::opts_chunk$set(echo = TRUE)
SAVE = F
MAC = T
WIN = F
if (MAC) {
if (WIN){
path = file.path("C:/Users/DayTimeChunks/Documents/PhD/HydrologicalMonitoring")
} else {
# path = file.path("/Users/DayTightChunks/Documents/PhD/HydrologicalMonitoring")
path = file.path("/Users/DayTightChunks/Documents/PhD/hydrological-monitoring")
time = read.csv2("/Users/DayTightChunks/Documents/PhD/Models/phd-model-master/Analysis/Data/Time.csv")
time$DayMoYr = as.POSIXct(strptime(time$Date, "%d/%m/%Y", tz="EST"))
}
} else {
path = file.path("D:/Documents/these_pablo/Alteckendorf2016/HydrologicalMonitoring")
time = read.csv2("D:/Documents/these_pablo/Models/BEACH2016/Analysis/Data/Time.csv")
time$DayMoYr = as.POSIXct(strptime(time$Date, "%d/%m/%Y", tz="EST"))
}
# Lab parameters and field constants
source(file.path(path, "global.R"))
soils = read.csv2(file.path(path, "Data/MassBalance_R.csv")) # Corrected with only ngC > 2.0
names(soils)
# soils$Date.ti <- as.POSIXct(soils$ti, "%Y-%m-%d %H:%M", tz = "EST")
soils$DayMoYr <- as.POSIXct(soils$ti, "%Y-%m-%d", tz = "EST")
#soils$Date.ti <- as.POSIXct(soils$Date.ti, "%d/%m/%Y %H:%M", tz = "EST")
#sum(is.na(soils$Date.ti))
soils$Blk.Conc = (
soils$MassSoil.g.North * soils$Conc.mug.g.dry.soil.N +
soils$MassSoil.g.Talweg * soils$Conc.mug.g.dry.soil.T +
soils$MassSoil.g.South * soils$Conc.mug.g.dry.soil.S)/(
soils$MassSoil.g.North + soils$MassSoil.g.Talweg + soils$MassSoil.g.South
)
# Old quick SD estimation
#soils$Blk.Conc.SD = (soils$Conc.mug.g.dry.soil.N + soils$Conc.mug.g.dry.soil.T + #soils$Conc.mug.g.dry.soil.S)/3.0
soils$Blk.Conc.mean =
(soils$Conc.mug.g.dry.soil.N + soils$Conc.mug.g.dry.soil.T + soils$Conc.mug.g.dry.soil.S)/3.0
soils$Blk.Conc.SD = ((
(soils$Conc.mug.g.dry.soil.N - soils$Blk.Conc.mean)**2 +
(soils$Conc.mug.g.dry.soil.T - soils$Blk.Conc.mean)**2 +
(soils$Conc.mug.g.dry.soil.S - soils$Blk.Conc.mean)**2)/3.0)**0.5
soils$Blk.d13C = (
soils$MassSoil.g.North * soils$Conc.mug.g.dry.soil.N * soils$comp.d13C.North +
soils$MassSoil.g.Talweg * soils$Conc.mug.g.dry.soil.T * soils$comp.d13C.Talweg +
soils$MassSoil.g.South * soils$Conc.mug.g.dry.soil.S * soils$comp.d13C.South)/(
soils$MassSoil.g.North * soils$Conc.mug.g.dry.soil.N +
soils$MassSoil.g.Talweg * soils$Conc.mug.g.dry.soil.T +
soils$MassSoil.g.South * soils$Conc.mug.g.dry.soil.S
)
soils$Bulk.d13C.SD = (soils$comp.d13C.SD.North + soils$comp.d13C.SD.Talweg + soils$comp.d13C.SD.South)/3.0
soils$Bulk.d13C.SDmean = (soils$comp.d13C.North + soils$comp.d13C.Talweg + soils$comp.d13C.South)/3.0
soils$Bulk.d13C.SDsd = ((
(soils$comp.d13C.North - soils$Bulk.d13C.SDmean)**2 +
(soils$comp.d13C.Talweg - soils$Bulk.d13C.SDmean)**2 +
(soils$comp.d13C.South - soils$Bulk.d13C.SDmean)**2
)/3.0)**0.5
soils$Bulk.d13C.SD2 =
((soils$comp.d13C.SD.North)**2 + (soils$comp.d13C.SD.Talweg)**2 + (soils$comp.d13C.SD.South)**2)**0.5
soils$Bulk.d13C.SD =
((soils$comp.d13C.SD.North)**2 + (soils$comp.d13C.SD.Talweg)**2 + (soils$comp.d13C.SD.South)**2)**0.5
soils$Bulk.d13C.SDmean = (soils$comp.d13C.North + soils$comp.d13C.Talweg + soils$comp.d13C.South)/3.0
soils$Bulk.d13C.SDsd = ((
(soils$comp.d13C.North - soils$Bulk.d13C.SDmean)**2 +
(soils$comp.d13C.Talweg - soils$Bulk.d13C.SDmean)**2 +
(soils$comp.d13C.South - soils$Bulk.d13C.SDmean)**2
)/3.0)**0.5
bulk = soils[ c(4:nrow(soils)), c('DayMoYr', 'Blk.Conc', 'Blk.Conc.SD', 'Blk.d13C', 'Bulk.d13C.SD')]
bulk = subset(bulk, !is.na(Blk.Conc))
View(bulk)
bulk = soils[ c(4:nrow(soils)), c('DayMoYr', 'Blk.Conc', 'Blk.Conc.SD', 'Blk.d13C', 'Bulk.d13C.SD', 'Bulk.d13C.SDsd')]
bulk = subset(bulk, !is.na(Blk.Conc))
soils$Bulk.d13C.SD =
((soils$comp.d13C.SD.North)**2 + (soils$comp.d13C.SD.Talweg)**2 + (soils$comp.d13C.SD.South)**2)**0.5
soils$Bulk.d13C.SDmean = (soils$comp.d13C.North + soils$comp.d13C.Talweg + soils$comp.d13C.South)/3.0
soils$Bulk.d13C.SDsd = ((
(soils$comp.d13C.North - soils$Bulk.d13C.SDmean)**2 +
(soils$comp.d13C.Talweg - soils$Bulk.d13C.SDmean)**2 +
(soils$comp.d13C.South - soils$Bulk.d13C.SDmean)**2
)/3.0)**0.5
soils$Bulk.d13C.SDmean = (soils$comp.d13C.North + soils$comp.d13C.Talweg + soils$comp.d13C.South)/3.0
soils$Bulk.d13C.SD = ((
(soils$comp.d13C.North - soils$Bulk.d13C.SDmean)**2 +
(soils$comp.d13C.Talweg - soils$Bulk.d13C.SDmean)**2 +
(soils$comp.d13C.South - soils$Bulk.d13C.SDmean)**2
)/3.0)**0.5
bulk = soils[ c(4:nrow(soils)), c('DayMoYr', 'Blk.Conc', 'Blk.Conc.SD', 'Blk.d13C', 'Bulk.d13C.SD', 'Bulk.d13C.SDsd')]
bulk = subset(bulk, !is.na(Blk.Conc))
names(bulk)
colnames(bulk) = c("DayMoYr", "ug.g", "ug.g.SD", "d13C",	"d13C.SD")
bt = merge(time, bulk, by = "DayMoYr", all = T)
bt$IDcal = paste("B-", bt$Jdays, sep = "")
conc = bt[, c("Jdays", "DayMoYr", "IDcal", "ug.g", "ug.g.SD")]
d13c = bt[, c("Jdays", "DayMoYr", "IDcal", "d13C",	"d13C.SD")]
conc = subset(conc, !is.na(ug.g))
d13c = subset(d13c, !is.na(d13C))
View(d13c)
write.table(conc, "BEACH_R/conc_bulk_cal.tss", sep="\t", row.names = F)
write.table(d13c, "BEACH_R/d13c_bulk_cal.tss", sep="\t", row.names = F)
library("dplyr")
shiny::runApp('Documents/PhD/shiny-hydro-app')
library("dplyr")
library("ggplot2")
library("scales")
library("ggrepel")
library(tidyr)
setwd("/Users/DayTightChunks/Documents/PhD/shiny-hydro-app")
getwd()
h <- read.csv2("data/groupAlteck2016_R.csv")
h$Date = as.POSIXct(strptime(h$Date, "%Y-%m-%d %H:%M", tz="EST"))
h = h[, c("Date", "Rain.mm")]
x1 <- h %>% filter(Date >= as.POSIXct('2016-03-30 00:00:00',  tz="EST") & Date < as.POSIXct('2016-04-01 00:00:00',  tz="EST"))
x1$tmp = 2
x1$tmp[1]=0
x1$Min = cumsum(x1$tmp)
x1$Int = x1$Rain.mm * 60
x1 = x1[, c("time", "rainfall")] # Minutes, mm/hr
h <- read.csv2("data/groupAlteck2016_R.csv")
View(h)
h$Date = as.POSIXct(strptime(h$Date, "%Y-%m-%d %H:%M", tz="EST"))
View(h)
h = h[, c("Date", "Rain.mm")]
x1 <- h %>% filter(Date >= as.POSIXct('2016-03-30 00:00:00',  tz="EST") & Date < as.POSIXct('2016-04-01 00:00:00',  tz="EST"))
View(x1)
runApp()
shiny::runApp()
