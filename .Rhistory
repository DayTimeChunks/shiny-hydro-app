# add node statements
node [shape = circle
#fontname = helvetica
#pendwidth = 2.0
]
App
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
rankdir=LR
# add node statements
node [shape = circle
#fontname = helvetica
#pendwidth = 2.0
]
App; Two
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
rankdir=LR
# add node statements
node [shape = circle
#fontname = helvetica
#pendwidth = 2.0
]
App; Run-off
# add a graph statement
#graph [nodesep = 0.1]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
rankdir=LR
# add node statements
node [shape = circle
#fontname = helvetica
#pendwidth = 2.0
]
App; Runoff
# add a graph statement
#graph [nodesep = 0.1]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
rankdir=LR
# add node statements
node [shape = circle
#fontname = helvetica
#pendwidth = 2.0
]
App; Runoff; Drains; Infil;
node [shape = square]
Plot; Outlet
# add edge statements
#edge [arrowhead = dimond]
App -> Plot ; # [label = ' App.' ];
Plot -> Run-off ; #[label = ' Run-off'];
Plot -> Drains ; # [label = ' Drainage' ];
Plot -> Infiltration ;  #[label = ' Infil.' ]
Runoff -> Outlet ;
Drains -> Outlet ; #[label = ' Channels' ]
Infil -> Outlet ; #[label = ' Base flow.' ]
# add a graph statement
#graph [nodesep = 0.1]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
rankdir=LR
# add node statements
node [shape = circle
#fontname = helvetica
#pendwidth = 2.0
]
App; Runoff; Drains; Infil;
node [shape = square]
Plot; Outlet
# add edge statements
#edge [arrowhead = dimond]
App -> Plot ; # [label = ' App.' ];
Plot -> Runoff ; #[label = ' Run-off'];
Plot -> Drains ; # [label = ' Drainage' ];
Plot -> Infiltration ;  #[label = ' Infil.' ]
Runoff -> Outlet ;
Drains -> Outlet ; #[label = ' Channels' ]
Infil -> Outlet ; #[label = ' Base flow.' ]
# add a graph statement
#graph [nodesep = 0.1]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
rankdir=LR
# add node statements
node [shape = circle
#fontname = helvetica
#pendwidth = 2.0
]
App; Runoff; Drains; Infil;
node [shape = square]
Plot; Outlet
# add edge statements
#edge [arrowhead = dimond]
App -> Plot ; # [label = ' App.' ];
Plot -> Runoff ; #[label = ' Run-off'];
Plot -> Drains ; # [label = ' Drainage' ];
Plot -> Infil ;  #[label = ' Infil.' ]
Runoff -> Outlet ;
Drains -> Outlet ; #[label = ' Channels' ]
Infil -> Outlet ; #[label = ' Base flow.' ]
# add a graph statement
#graph [nodesep = 0.1]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
rankdir=LR
# add node statements
node [shape = circle
#fontname = helvetica
#pendwidth = 2.0
]
App; Runoff; Drains; Infil;
node [shape = square]
Plot; Outlet
# add edge statements
#edge [arrowhead = dimond]
App -> Plot ; # [label = ' App.' ];
Plot -> Runoff ; #[label = ' Run-off'];
Plot -> Drains ; # [label = ' Drainage' ];
Plot -> Infil ;  #[label = ' Infil.' ]
Plot -> Plat Uptake:
Runoff -> Outlet ;
Drains -> Outlet ; #[label = ' Channels' ]
Infil -> Outlet ; #[label = ' Base flow.' ]
# add a graph statement
#graph [nodesep = 0.1]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
rankdir=LR
# add node statements
node [shape = circle
#fontname = helvetica
#pendwidth = 2.0
]
App; Runoff; Drains; Infil;
node [shape = square]
Plot; Outlet
# add edge statements
#edge [arrowhead = dimond]
App -> Plot ; # [label = ' App.' ];
Plot -> Runoff ; #[label = ' Run-off'];
Plot -> Drains ; # [label = ' Drainage' ];
Plot -> Infil ;  #[label = ' Infil.' ]
Plot -> Uptake;
Plot -> Sorption;
Plot -> Degradation;
Runoff -> Outlet ;
Drains -> Outlet ; #[label = ' Channels' ]
Infil -> Outlet ; #[label = ' Base flow.' ]
# add a graph statement
#graph [nodesep = 0.1]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
rankdir=LR
# add node statements
node [shape = circle
#fontname = helvetica
#pendwidth = 2.0
]
App; Runoff; Drains; Infil;
node [shape = square]
Plot; Outlet; Groundwater
# add edge statements
#edge [arrowhead = dimond]
App -> Plot ; # [label = ' App.' ];
Plot -> Runoff ; #[label = ' Run-off'];
Plot -> Drains ; # [label = ' Drainage' ];
Plot -> Infil ;  #[label = ' Infil.' ]
Plot -> Uptake;
Plot -> Sorption;
Plot -> Degradation;
Runoff -> Outlet ;
Drains -> Outlet ; #[label = ' Channels' ]
Infil -> Outlet ; #[label = ' Base flow.' ]
Infil -> Groundwater;
# add a graph statement
#graph [nodesep = 0.1]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
rankdir=LR
# add node statements
node [shape = circle
#fontname = helvetica
#pendwidth = 2.0
]
App; Runoff; Drains; Infil;
node [shape = square]
Plot; Outlet; GW
# add edge statements
#edge [arrowhead = dimond]
App -> Plot ; # [label = ' App.' ];
Plot -> Runoff ; #[label = ' Run-off'];
Plot -> Drains ; # [label = ' Drainage' ];
Plot -> Infil ;  #[label = ' Infil.' ]
Plot -> Uptake;
Plot -> Sorption;
Plot -> Degradation;
Runoff -> Outlet ;
Drains -> Outlet ; #[label = ' Channels' ]
Infil -> Outlet ; #[label = ' Base flow.' ]
Infil -> GW;
# add a graph statement
#graph [nodesep = 0.1]
}
")
grVizOutput(boxes_and_circles)
library(DiagrammeR)
grViz("
test <- digraph boxes_and_circles {
rankdir=LR
# add node statements
node [shape = circle
#fontname = helvetica
#pendwidth = 2.0
]
App; Runoff; Drains; Infil;
node [shape = square]
Plot; Outlet; GW
# add edge statements
#edge [arrowhead = dimond]
App -> Plot ; # [label = ' App.' ];
Plot -> Runoff ; #[label = ' Run-off'];
Plot -> Drains ; # [label = ' Drainage' ];
Plot -> Infil ;  #[label = ' Infil.' ]
Plot -> Uptake;
Plot -> Sorption;
Plot -> Degradation;
Runoff -> Outlet ;
Drains -> Outlet ; #[label = ' Channels' ]
Infil -> Outlet ; #[label = ' Base flow.' ]
Infil -> GW;
# add a graph statement
#graph [nodesep = 0.1]
}
")
grVizOutput(boxes_and_circles)
library(DiagrammeR)
grViz("
test <- digraph boxes_and_circles {
rankdir=LR
# add node statements
node [shape = circle
#fontname = helvetica
#pendwidth = 2.0
]
App; Runoff; Drains; Infil;
node [shape = square]
Plot; Outlet; GW
# add edge statements
#edge [arrowhead = dimond]
App -> Plot ; # [label = ' App.' ];
Plot -> Runoff ; #[label = ' Run-off'];
Plot -> Drains ; # [label = ' Drainage' ];
Plot -> Infil ;  #[label = ' Infil.' ]
Plot -> Uptake;
Plot -> Sorption;
Plot -> Degradation;
Runoff -> Outlet ;
Drains -> Outlet ; #[label = ' Channels' ]
Infil -> Outlet ; #[label = ' Base flow.' ]
Infil -> GW;
# add a graph statement
#graph [nodesep = 0.1]
}
")
grVizOutput(test)
test <- digraph {
rankdir=LR
# add node statements
node [shape = circle
#fontname = helvetica
#pendwidth = 2.0
]
App; Runoff; Drains; Infil;
node [shape = square]
Plot; Outlet; GW
# add edge statements
#edge [arrowhead = dimond]
App -> Plot ; # [label = ' App.' ];
Plot -> Runoff ; #[label = ' Run-off'];
Plot -> Drains ; # [label = ' Drainage' ];
Plot -> Infil ;  #[label = ' Infil.' ]
Plot -> Uptake;
Plot -> Sorption;
Plot -> Degradation;
Runoff -> Outlet ;
Drains -> Outlet ; #[label = ' Channels' ]
Infil -> Outlet ; #[label = ' Base flow.' ]
Infil -> GW;
# add a graph statement
#graph [nodesep = 0.1]
}
")
library(DiagrammeR)
grViz("
test <- digraph {
rankdir=LR
# add node statements
node [shape = circle
#fontname = helvetica
#pendwidth = 2.0
]
App; Runoff; Drains; Infil;
node [shape = square]
Plot; Outlet; GW
# add edge statements
#edge [arrowhead = dimond]
App -> Plot ; # [label = ' App.' ];
Plot -> Runoff ; #[label = ' Run-off'];
Plot -> Drains ; # [label = ' Drainage' ];
Plot -> Infil ;  #[label = ' Infil.' ]
Plot -> Uptake;
Plot -> Sorption;
Plot -> Degradation;
Runoff -> Outlet ;
Drains -> Outlet ; #[label = ' Channels' ]
Infil -> Outlet ; #[label = ' Base flow.' ]
Infil -> GW;
# add a graph statement
#graph [nodesep = 0.1]
}
")
grVizOutput(test)
grViz("
test <- digraph {
rankdir=LR
# add node statements
node [shape = circle
#fontname = helvetica
#pendwidth = 2.0
]
App; Runoff; Drains; Infil;
node [shape = square]
Plot; Outlet; GW
# add edge statements
#edge [arrowhead = dimond]
App -> Plot ; # [label = ' App.' ];
Plot -> Runoff ; #[label = ' Run-off'];
Plot -> Drains ; # [label = ' Drainage' ];
Plot -> Infil ;  #[label = ' Infil.' ]
Plot -> Uptake;
Plot -> Sorption;
Plot -> Degradation;
Runoff -> Outlet ;
Drains -> Outlet ; #[label = ' Channels' ]
Infil -> Outlet ; #[label = ' Base flow.' ]
Infil -> GW;
# add a graph statement
#graph [nodesep = 0.1]
}
")
library(DiagrammeR)
grViz("
test <- digraph name {
rankdir=LR
# add node statements
node [shape = circle
#fontname = helvetica
#pendwidth = 2.0
]
App; Runoff; Drains; Infil;
node [shape = square]
Plot; Outlet; GW
# add edge statements
#edge [arrowhead = dimond]
App -> Plot ; # [label = ' App.' ];
Plot -> Runoff ; #[label = ' Run-off'];
Plot -> Drains ; # [label = ' Drainage' ];
Plot -> Infil ;  #[label = ' Infil.' ]
Plot -> Uptake;
Plot -> Sorption;
Plot -> Degradation;
Runoff -> Outlet ;
Drains -> Outlet ; #[label = ' Channels' ]
Infil -> Outlet ; #[label = ' Base flow.' ]
Infil -> GW;
# add a graph statement
#graph [nodesep = 0.1]
}
")
test <- grViz("
digraph name {
rankdir=LR
# add node statements
node [shape = circle
#fontname = helvetica
#pendwidth = 2.0
]
App; Runoff; Drains; Infil;
node [shape = square]
Plot; Outlet; GW
# add edge statements
#edge [arrowhead = dimond]
App -> Plot ; # [label = ' App.' ];
Plot -> Runoff ; #[label = ' Run-off'];
Plot -> Drains ; # [label = ' Drainage' ];
Plot -> Infil ;  #[label = ' Infil.' ]
Plot -> Uptake;
Plot -> Sorption;
Plot -> Degradation;
Runoff -> Outlet ;
Drains -> Outlet ; #[label = ' Channels' ]
Infil -> Outlet ; #[label = ' Base flow.' ]
Infil -> GW;
# add a graph statement
#graph [nodesep = 0.1]
}
")
grVizOutput(test)
pwd()
cwd()
cd()
wd()
cwd()
grVizOutput('test')
library(DiagrammeR)
grViz("
digraph name {
rankdir=LR
# add node statements
node [shape = circle
#fontname = helvetica
#pendwidth = 2.0
]
App; Runoff; Drains; Infil;
node [shape = square]
Plot; Outlet; GW
# add edge statements
#edge [arrowhead = dimond]
App -> Plot ; # [label = ' App.' ];
Plot -> Runoff ; #[label = ' Run-off'];
Plot -> Drains ; # [label = ' Drainage' ];
Plot -> Infil ;  #[label = ' Infil.' ]
Plot -> Uptake;
Plot -> Sorption;
Plot -> Degradation;
Runoff -> Outlet ;
Drains -> Outlet ; #[label = ' Channels' ]
Infil -> Outlet ; #[label = ' Base flow.' ]
Infil -> GW;
# add a graph statement
#graph [nodesep = 0.1]
}
")
library(png)
shiny::runApp('Documents/PhD/InteractiveApps/Alteck-app')
shiny::runApp('Documents/PhD/InteractiveApps/Alteck-app')
hydro <- read.csv2("data/groupAlteck2016_R.csv")
setwd("/Users/DayTightChunks/Documents/PhD/InteractiveApps/Alteck-app/data")
# setwd("/Users/DayTightChunks/Documents/PhD/Routput/Alteck/R")
hydro <- read.csv2("data/groupAlteck2016_R.csv")
setwd("/Users/DayTightChunks/Documents/PhD/InteractiveApps/Alteck-app")
hydro <- read.csv2("data/groupAlteck2016_R.csv")
str(hydro)
AOdf = read.csv2("data/AOdataframe_R.csv")
str(AOdf)
shiny::runApp()
AOdf$WeekSubWeek <- as.character(AOdf$WeekSubWeek)
View(AOdf)
AOdf = read.csv2("data/AOdataframe_R.csv")
AOdf$WeekSubWeek <- factor(AOdf$WeekSubWeek, levels = unique(AOdf$WeekSubWeek))
AOdf$Weeks <- factor(AOdf$Weeks, levels = unique(AOdf$Weeks))
AOdf$ti <- as.POSIXct(strptime(AOdf$ti, "%Y-%m-%d %H:%M", tz="EST"))
sum(is.na(AOdf$ti))
shiny::runApp()
Split <- strsplit(AOdf$WeekSubWeek, "-", fixed = TRUE)
AOdf$WeekSubWeek <- as.character(AOdf$WeekSubWeek)
Split <- strsplit(AOdf$WeekSubWeek, "-", fixed = TRUE)
AOdf$Weeks <- sapply(Split, "[", 1)
str(AOdf)
AOdf$WeekSubWeek <- factor(AOdf$WeekSubWeek, levels = unique(AOdf$WeekSubWeek))
AOdf$Weeks <- factor(AOdf$Weeks, levels = unique(AOdf$Weeks))
AOdf$ti <- as.POSIXct(strptime(AOdf$ti, "%Y-%m-%d %H:%M", tz="EST"))
shiny::runApp()
shiny::runApp()
install.packages("shinydashboard")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
