#title.vjust = -1,
nrow = 2,
title.position = "top"
),
shape=guide_legend(#title=expression("Type"),
order = 2,
nrow=2,
title.position = "top",
keyheight = NULL, title.vjust = 10, label.vjust = NULL),
size = guide_legend(order = 3,
#title=expression("Mean Discharge"),
title=expression("Mean Discharge (" ~m^3 / h~")" ),
nrow=2,
title.position = "top"
# title.vjust = .26
#keyheight = 0,
#label.vjust = 0
))
#ggplotly(wsALL_field)
wsALL_field
wsALL_field <- ggplot(data = wstidier2, aes(x = Date, y = measure, group = Source) )+
# Water trend
stat_smooth(data=subset(wstidier2,
(Source == "Outlet"
# & Event > 1
& Type == "Dissolved")),
method = "lm", formula = y ~ poly(x, 2), se = T, aes(colour = 'Outlet'), alpha = 0.2, size=0.2) +
# Bulk trend
stat_smooth(data=subset(wstidier2,
(Source == "Bulk" )), #| Source == "South" )),
method = "lm", formula = y ~ poly(x, 2), se = T, aes(colour = 'Bulk'), alpha = 0.2, size=0.2) +
# Error bars
geom_errorbar(data=subset(wstidier2, Source == 'Bulk'), limits_DdC, size=0.2) +
geom_errorbar(data=subset(wstidier2, Source == 'South'
| Source == 'North'
| Source == 'Valley'
), limits_DdC, size=0.1) +
geom_errorbar(data=subset(wstidier2, Source == 'Outlet'), limits_DdC) +
# Data points
geom_point(data=subset(wstidier2, (Source == 'South'
| Source == 'North'
| Source == 'Valley'
)), aes(shape = Type, colour = Source)) +
geom_point(data=subset(wstidier2, Source == 'Outlet'), aes(shape = Type, colour = Source, size = Qmean)) +
geom_point(data=subset(wstidier2, Source == 'Bulk'), aes(shape = Type, colour = Source)) +
theme_bw() +
# Applications
annotate("text", x = as.POSIXct('2016-03-28 08:04:00'), y = 0,
label = as.character(expression(paste( "\u066D"))), parse = T, size = 6.0) +
annotate("text", x = as.POSIXct('2016-04-05 00:04:00'), y = 0,
label = as.character(expression(paste( "\u066D"))), parse = T, size = 6.0) +
annotate("text", x = as.POSIXct('2016-04-13 08:04:00'), y = 0,
label = as.character(expression(paste( "\u066D"))), parse = T, size = 6.0) +
annotate("text", x = as.POSIXct('2016-05-25 08:04:00'), y = 0,
label = as.character(expression(paste( "\u066D"))), parse = T, size = 6.0) +
# Title applics
annotate("text", x = as.POSIXct('2016-04-05 08:04:00'), y = 4.5,
label = as.character(expression(paste( "\u066D", " Applications"))), parse = T, size = 4.0) +
scale_x_datetime(breaks = date_breaks("2 weeks"), labels = date_format("%b %d")) +
#scale_x_datetime(breaks = date_breaks("1 month"), labels = date_format("%b %d")) +
theme(legend.position="top"
# axis.title.x = element_blank()
# axis.text.x=element_text(angle = 45, hjust = 1)
) +
xlab("Date") +
#ylab(expression(paste({Delta~delta}^"13","C", ' (\u2030)'))) +
scale_y_continuous(
expression(paste({Delta~delta}^"13","C", ' (\u2030)')),
sec.axis = sec_axis(trans = ~ (1-((1000 + d13Co + .)/(1000+d13Co))^(1000/epsilon_field))*100 ,
name = element_blank(),
#name = "Degradation (%)",
breaks=c(20, 40, 60, 70, 80, 85, 90, 95) )# breaks=seq(20, 120, 15))
)  +
scale_color_manual(name= "Source",
values = c("black", "#F8766D", "#00BFC4", "#DE8C00", "#00BA38"
#  "black", "#D55E00",  "#00BFC4",  "#B79F00", "#00BA38"
# Bulk, North, outlet, South, Valley
),
breaks=c("Bulk", "North" , "Valley" ,"South",  "Outlet"),
labels=c("Bulk", "North" , "Valley" ,"South",  "Outlet")
) +
scale_size_continuous(range = c(1, 3), breaks= c(25, 50, 100, 150, 200, 250), limits = c(0, 250)) +
# scale_size_continuous(range = c(1, 3)) +
guides(col = guide_legend(order = 1,
#title=expression("Source"),
#title.vjust = -1,
nrow = 2,
title.position = "top"
),
shape=guide_legend(title=("Type"),
order = 2,
nrow=2,
title.position = "top",
keyheight = NULL, title.vjust = 10, label.vjust = NULL),
size = guide_legend(order = 3,
#title=expression("Mean Discharge"),
title=expression("Mean Discharge (" ~m^3 / h~")" ),
nrow=2,
title.position = "top"
# title.vjust = .26
#keyheight = 0,
#label.vjust = 0
))
#ggplotly(wsALL_field)
wsALL_field
wsALL_field <- ggplot(data = wstidier2, aes(x = Date, y = measure, group = Source) )+
# Water trend
stat_smooth(data=subset(wstidier2,
(Source == "Outlet"
# & Event > 1
& Type == "Dissolved")),
method = "lm", formula = y ~ poly(x, 2), se = T, aes(colour = 'Outlet'), alpha = 0.2, size=0.2) +
# Bulk trend
stat_smooth(data=subset(wstidier2,
(Source == "Bulk" )), #| Source == "South" )),
method = "lm", formula = y ~ poly(x, 2), se = T, aes(colour = 'Bulk'), alpha = 0.2, size=0.2) +
# Error bars
geom_errorbar(data=subset(wstidier2, Source == 'Bulk'), limits_DdC, size=0.2) +
geom_errorbar(data=subset(wstidier2, Source == 'South'
| Source == 'North'
| Source == 'Valley'
), limits_DdC, size=0.1) +
geom_errorbar(data=subset(wstidier2, Source == 'Outlet'), limits_DdC) +
# Data points
geom_point(data=subset(wstidier2, (Source == 'South'
| Source == 'North'
| Source == 'Valley'
)), aes(shape = Type, colour = Source)) +
geom_point(data=subset(wstidier2, Source == 'Outlet'), aes(shape = Type, colour = Source, size = Qmean)) +
geom_point(data=subset(wstidier2, Source == 'Bulk'), aes(shape = Type, colour = Source)) +
theme_bw() +
# Applications
annotate("text", x = as.POSIXct('2016-03-28 08:04:00'), y = 0,
label = as.character(expression(paste( "\u066D"))), parse = T, size = 6.0) +
annotate("text", x = as.POSIXct('2016-04-05 00:04:00'), y = 0,
label = as.character(expression(paste( "\u066D"))), parse = T, size = 6.0) +
annotate("text", x = as.POSIXct('2016-04-13 08:04:00'), y = 0,
label = as.character(expression(paste( "\u066D"))), parse = T, size = 6.0) +
annotate("text", x = as.POSIXct('2016-05-25 08:04:00'), y = 0,
label = as.character(expression(paste( "\u066D"))), parse = T, size = 6.0) +
# Title applics
annotate("text", x = as.POSIXct('2016-04-05 08:04:00'), y = 4.5,
label = as.character(expression(paste( "\u066D", " Applications"))), parse = T, size = 4.0) +
scale_x_datetime(breaks = date_breaks("2 weeks"), labels = date_format("%b %d")) +
#scale_x_datetime(breaks = date_breaks("1 month"), labels = date_format("%b %d")) +
theme(legend.position="top"
# axis.title.x = element_blank()
# axis.text.x=element_text(angle = 45, hjust = 1)
) +
xlab("Date") +
#ylab(expression(paste({Delta~delta}^"13","C", ' (\u2030)'))) +
scale_y_continuous(
expression(paste({Delta~delta}^"13","C", ' (\u2030)')),
sec.axis = sec_axis(trans = ~ (1-((1000 + d13Co + .)/(1000+d13Co))^(1000/epsilon_field))*100 ,
name = element_blank(),
#name = "Degradation (%)",
breaks=c(20, 40, 60, 70, 80, 85, 90, 95) )# breaks=seq(20, 120, 15))
)  +
scale_color_manual(name= "Source",
values = c("black", "#F8766D", "#00BFC4", "#DE8C00", "#00BA38"
#  "black", "#D55E00",  "#00BFC4",  "#B79F00", "#00BA38"
# Bulk, North, outlet, South, Valley
),
breaks=c("Bulk", "North" , "Valley" ,"South",  "Outlet"),
labels=c("Bulk", "North" , "Valley" ,"South",  "Outlet")
) +
scale_size_continuous(range = c(1, 3), breaks= c(25, 50, 100, 150, 200, 250), limits = c(0, 250)) +
# scale_size_continuous(range = c(1, 3)) +
guides(col = guide_legend(order = 1,
#title=expression("Source"),
#title.vjust = -1,
nrow = 2,
title.position = "top"
),
shape=guide_legend(title=("Type"),
order = 2,
nrow=2,
title.position = "top",
keyheight = NULL, title.vjust = -110, label.vjust = NULL),
size = guide_legend(order = 3,
#title=expression("Mean Discharge"),
title=expression("Mean Discharge (" ~m^3 / h~")" ),
nrow=2,
title.position = "top"
# title.vjust = .26
#keyheight = 0,
#label.vjust = 0
))
#ggplotly(wsALL_field)
wsALL_field
wsALL_field <- ggplot(data = wstidier2, aes(x = Date, y = measure, group = Source) )+
# Water trend
stat_smooth(data=subset(wstidier2,
(Source == "Outlet"
# & Event > 1
& Type == "Dissolved")),
method = "lm", formula = y ~ poly(x, 2), se = T, aes(colour = 'Outlet'), alpha = 0.2, size=0.2) +
# Bulk trend
stat_smooth(data=subset(wstidier2,
(Source == "Bulk" )), #| Source == "South" )),
method = "lm", formula = y ~ poly(x, 2), se = T, aes(colour = 'Bulk'), alpha = 0.2, size=0.2) +
# Error bars
geom_errorbar(data=subset(wstidier2, Source == 'Bulk'), limits_DdC, size=0.2) +
geom_errorbar(data=subset(wstidier2, Source == 'South'
| Source == 'North'
| Source == 'Valley'
), limits_DdC, size=0.1) +
geom_errorbar(data=subset(wstidier2, Source == 'Outlet'), limits_DdC) +
# Data points
geom_point(data=subset(wstidier2, (Source == 'South'
| Source == 'North'
| Source == 'Valley'
)), aes(shape = Type, colour = Source)) +
geom_point(data=subset(wstidier2, Source == 'Outlet'), aes(shape = Type, colour = Source, size = Qmean)) +
geom_point(data=subset(wstidier2, Source == 'Bulk'), aes(shape = Type, colour = Source)) +
theme_bw() +
# Applications
annotate("text", x = as.POSIXct('2016-03-28 08:04:00'), y = 0,
label = as.character(expression(paste( "\u066D"))), parse = T, size = 6.0) +
annotate("text", x = as.POSIXct('2016-04-05 00:04:00'), y = 0,
label = as.character(expression(paste( "\u066D"))), parse = T, size = 6.0) +
annotate("text", x = as.POSIXct('2016-04-13 08:04:00'), y = 0,
label = as.character(expression(paste( "\u066D"))), parse = T, size = 6.0) +
annotate("text", x = as.POSIXct('2016-05-25 08:04:00'), y = 0,
label = as.character(expression(paste( "\u066D"))), parse = T, size = 6.0) +
# Title applics
annotate("text", x = as.POSIXct('2016-04-05 08:04:00'), y = 4.5,
label = as.character(expression(paste( "\u066D", " Applications"))), parse = T, size = 4.0) +
scale_x_datetime(breaks = date_breaks("2 weeks"), labels = date_format("%b %d")) +
#scale_x_datetime(breaks = date_breaks("1 month"), labels = date_format("%b %d")) +
theme(legend.position="top"
# axis.title.x = element_blank()
# axis.text.x=element_text(angle = 45, hjust = 1)
) +
xlab("Date") +
#ylab(expression(paste({Delta~delta}^"13","C", ' (\u2030)'))) +
scale_y_continuous(
expression(paste({Delta~delta}^"13","C", ' (\u2030)')),
sec.axis = sec_axis(trans = ~ (1-((1000 + d13Co + .)/(1000+d13Co))^(1000/epsilon_field))*100 ,
name = element_blank(),
#name = "Degradation (%)",
breaks=c(20, 40, 60, 70, 80, 85, 90, 95) )# breaks=seq(20, 120, 15))
)  +
scale_color_manual(name= "Source",
values = c("black", "#F8766D", "#00BFC4", "#DE8C00", "#00BA38"
#  "black", "#D55E00",  "#00BFC4",  "#B79F00", "#00BA38"
# Bulk, North, outlet, South, Valley
),
breaks=c("Bulk", "North" , "Valley" ,"South",  "Outlet"),
labels=c("Bulk", "North" , "Valley" ,"South",  "Outlet")
) +
scale_size_continuous(range = c(1, 3), breaks= c(25, 50, 100, 150, 200, 250), limits = c(0, 250)) +
# scale_size_continuous(range = c(1, 3)) +
guides(col = guide_legend(order = 1,
#title=expression("Source"),
#title.vjust = -1,
nrow = 2,
title.position = "top"
),
shape=guide_legend(title=("Type"),
order = 2,
nrow=2,
title.position = "top",
keyheight = NULL, title.vjust = 0, label.vjust = NULL),
size = guide_legend(order = 3,
#title=expression("Mean Discharge"),
title=expression("Mean Discharge (" ~m^3 / h~")" ),
nrow=2,
title.position = "top"
# title.vjust = .26
#keyheight = 0,
#label.vjust = 0
))
#ggplotly(wsALL_field)
wsALL_field
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message = FALSE)
Sys.setlocale("LC_ALL", "English")
library(sm)
library(vioplot)
library(dplyr)
library(tidyr)
library(zoo)
library(reshape)
library(ggplot2)
library("ggrepel")
library("plotly")
library("cowplot")
library("gridExtra")
library("Cairo")
library("GGally")
library("scales")
library("plotKML")
# Stats
library("vegan")
library("cluster")
# Saving a xlxs file
# library(xlsx)
# Initial signature measured in tank
initialDelta = d13Co = -32.253
epsilon_mean= -2.2 # ± 0.4
epsilon_lab = epsilon_mean
# Calculated in this Book from Bulk signatures and bulk concentrations
epsilonField_max = -1.37 + 0.53
epsilonField_min = -1.37 - 0.53
epsilonField_mean = -1.37 # ± 0.53
# Closed system assumption applied to field for demonstration
epsilon_field = epsilonField_mean
# Soils
soils = read.csv2("Data/MassBalance_R.csv",
na.strings=c('#DIV/0!', '', 'NA'), header = TRUE)
names(soils)
colnames(soils)[colnames(soils) == "ti"] <- "Date.ti"
soils$Date.ti <- as.POSIXct(strptime(soils$Date.ti,
"%Y-%m-%d %H:%M", tz="EST")) # csv typos, option 1
sum(is.na(soils$Date.ti)) == 0
initialDelta
# Get rid of imputed values to avoid bias
soils$DD13C.North <- (ifelse(!is.na(soils$comp.d13C.SD.North), soils$comp.d13C.North - (initialDelta), NA))
soils$DD13C.Talweg <- (ifelse(!is.na(soils$comp.d13C.SD.Talweg), soils$comp.d13C.Talweg - (initialDelta), NA))
soils$DD13C.South <- (ifelse(!is.na(soils$comp.d13C.SD.South), soils$comp.d13C.South - (initialDelta), NA))
dropSoil <- c("WeekSubWeek", # "Event",
"CumOutDiss.g", "CumOutFilt.g", "CumOutAppMass.g",  "CumOutMELsm.g",
# "CumAppMass.g",
# "ID.N",
"ID.T",  "Area.N", "Area.T", "Area.S",
"comp.d13C.SE.North", "comp.d13C.SE.Talweg", "comp.d13C.SE.South",
"ngC.SD","ngC.SE", "N_compsoil" )#, "N_ngC")
soils <- soils[ , !(names(soils) %in% dropSoil)]
soilsCheck <- soils[complete.cases(soils[ , "ID.N"]),]
timeApps <- soils[ , c("Date.ti", "timeSinceApp", "timeSinceApp.NoSo",
"timeSinceApp.N", "timeSinceApp.T" , "timeSinceApp.S",
"Event")]
# Quasi-Molten SOILS
soilGroups = read.csv2("Data/WeeklySoils_Rng.csv",
na.strings=c('#DIV/0!', '', 'NA'), header = TRUE)
soilGroups$Date.ti <- as.POSIXct(strptime(soilGroups$Date.ti,
"%Y-%m-%d %H:%M", tz="EST")) # csv typos, option 1
sum(is.na(soilGroups$Date.ti)) == 0
soilGroups$comp.d13C <- ifelse(is.na(soilGroups$comp.d13C.SD), NA, soilGroups$comp.d13C)
# soilGroups$ngC.Label <- ifelse(soilGroups$ngC.mean < 10, "< 10 ng", "> 10 ng")
soilGroups <- subset(soilGroups, comp.d13C.SD <= 0.70)
#str(soils)
soilGrApp <- merge(soilGroups, timeApps, by = "Date.ti", all = F)
soilGrApp <- soilGrApp[complete.cases(soilGrApp[ , "timeSinceApp"]),]
soilGrApp$DD13C.comp <- ifelse(is.na(soilGrApp$comp.d13C.SD), NA, soilGrApp$DD13C.comp)
soilGrApp <- subset(soilGrApp, comp.d13C.SD <= 0.70)
cor.test(soilGroups$comp.d13C, soilGroups$Conc.mug.g.dry.soil)
pearson_r <- cor.test(soilGroups$comp.d13C, soilGroups$Conc.mug.g.dry.soil)[4]
r_label <- sprintf("Pearson~r == %0.2f", pearson_r)
p_value <- cor.test(soilGroups$comp.d13C, soilGroups$Conc.mug.g.dry.soil)[3]
if (p_value < 0.0001){
p_label <- "(p < 0.0001)"
} else if (p_value < 0.001) {
p_label <- "(p < 0.001)"
} else if (p_value < 0.015) {
p_label <- ("p < 0.01")
} else {
p_label <- "Check significance"
}
soilGrApp$Source <- ifelse(soilGrApp$Transect == "T", "Valley", "Plateau")
soilGrApp$Source <- as.factor(soilGrApp$Source)
soilGrApp.N <- subset(soilGrApp, soilGrApp$Transect == "N")
soilGrApp.T <- subset(soilGrApp, soilGrApp$Transect == "T")
soilGrApp.S <- subset(soilGrApp, soilGrApp$Transect == "S")
soilGrApp.N$timeSinceApp <- soilGrApp.N$timeSinceApp.N
soilGrApp.T$timeSinceApp <- soilGrApp.T$timeSinceApp.T
soilGrApp.S$timeSinceApp <- soilGrApp.S$timeSinceApp.S
dropAppDates <- c("timeSinceApp.NoSo", "timeSinceApp.N", "timeSinceApp.T", "timeSinceApp.S")
soilGrApp.N <- soilGrApp.N[ , !(names(soilGrApp.N) %in% dropAppDates)]
soilGrApp.T <- soilGrApp.T[ , !(names(soilGrApp.T) %in% dropAppDates)]
soilGrApp.S <- soilGrApp.S[ , !(names(soilGrApp.S) %in% dropAppDates)]
soilGrApp <- rbind(soilGrApp.N, soilGrApp.T)
soilGrApp <- rbind(soilGrApp, soilGrApp.S)
p <- ggplot(data = soilGrApp, aes(x=Conc.mug.g.dry.soil, y=DD13C.comp))+
geom_errorbar(aes(ymin = DD13C.comp - comp.d13C.SD, ymax = DD13C.comp + comp.d13C.SD)) +
geom_errorbarh(aes(xmin = Conc.mug.g.dry.soil - Conc.ComSoil.SD, xmax = Conc.mug.g.dry.soil + Conc.ComSoil.SD)) +
stat_smooth(data = subset(soilGrApp, Conc.mug.g.dry.soil < 8),
aes(x=Conc.mug.g.dry.soil, y=DD13C.comp), method = "lm", formula = y ~ poly(x, 2), se=F) +
# geom_point(aes(group = ID, size = timeSinceApp.NoSo)) + # , colour = Source)) +  # , shape = ngC.Label)) +
geom_point(aes(group = ID, size = timeSinceApp)) +
theme_bw() +
theme(legend.position = "bottom") +
labs(size="   Days after application", colour="Source" ) + #, shape = "Mass Carbon") +
ylab(expression(paste({Delta~delta}^"13","C", ' (\u2030)'))) +
xlab(expression(paste("S-MET Soil Concentration  ", {({mu}*g / g~dry~wt.)}))) +
annotate("text", x = 5.5, y = 3.7, label = as.character(r_label), parse = T, size = 3.5) +
annotate("text", x = 5.5, y = 3.2, label = p_label, parse = T, size = 3.5) +
scale_size_continuous(range = c(1, 5)) +
guides(size=guide_legend(nrow=1))
#scale_color_hue("Group") +
#scale_fill_manual(
#  "CI horizontal line", values=rep(1,4),
#  guide=guide_legend(override.aes = list(colour=c("orange", "darkred"))),
#  labels=c("CI of 95%", "CI of 99%")
#)
#geom_text_repel(data = subset(soilGrApp, (!is.na(ngC.Label) & Wnum > 10) ), aes(label=Wnum),
#               arrow = arrow(length = unit(0.005, 'npc'), type = "closed"),
#               force = 1,
#               point.padding = unit(1.0, 'lines'),
#               max.iter = 2e3,
#               nudge_x = .2)
p
#ggsave(p, filename = "images/DDvsConc_soils.png", width = 8, height = 5, units = "in", scale = 1)
#ggplotly(p)
#stat_smooth(method = "lm", formula = y ~ poly(x, 2)) +
#stat_smooth(method = "lm", formula = y~x, se=F)
ggsave(p, filename = "images/DDvsConc_soils.png", width = 8, height = 5, units = "in", scale = 1)
p
View(soilGrApp)
# Quasi-Molten SOILS
soilGroups = read.csv2("Data/WeeklySoils_Rng.csv",
na.strings=c('#DIV/0!', '', 'NA'), header = TRUE)
soilGroups$Date.ti <- as.POSIXct(strptime(soilGroups$Date.ti,
"%Y-%m-%d %H:%M", tz="EST")) # csv typos, option 1
sum(is.na(soilGroups$Date.ti)) == 0
soilGroups$comp.d13C <- ifelse(is.na(soilGroups$comp.d13C.SD), NA, soilGroups$comp.d13C)
# soilGroups$ngC.Label <- ifelse(soilGroups$ngC.mean < 10, "< 10 ng", "> 10 ng")
soilGroups <- subset(soilGroups, comp.d13C.SD <= 0.70)
#str(soils)
soilGrApp <- merge(soilGroups, timeApps, by = "Date.ti", all = F)
soilGrApp <- soilGrApp[complete.cases(soilGrApp[ , "timeSinceApp"]),]
soilGrApp$DD13C.comp <- ifelse(is.na(soilGrApp$comp.d13C.SD), NA, soilGrApp$DD13C.comp)
soilGrApp <- subset(soilGrApp, comp.d13C.SD <= 0.70)
cor.test(soilGroups$comp.d13C, soilGroups$Conc.mug.g.dry.soil)
pearson_r <- cor.test(soilGroups$comp.d13C, soilGroups$Conc.mug.g.dry.soil)[4]
r_label <- sprintf("Pearson~r == %0.2f", pearson_r)
p_value <- cor.test(soilGroups$comp.d13C, soilGroups$Conc.mug.g.dry.soil)[3]
if (p_value < 0.0001){
p_label <- "(p < 0.0001)"
} else if (p_value < 0.001) {
p_label <- "(p < 0.001)"
} else if (p_value < 0.015) {
p_label <- ("p < 0.01")
} else {
p_label <- "Check significance"
}
soilGrApp$Source <- ifelse(soilGrApp$Transect == "T", "Valley", "Plateau")
soilGrApp$Source <- as.factor(soilGrApp$Source)
soilGrApp.N <- subset(soilGrApp, soilGrApp$Transect == "N")
soilGrApp.T <- subset(soilGrApp, soilGrApp$Transect == "T")
soilGrApp.S <- subset(soilGrApp, soilGrApp$Transect == "S")
soilGrApp.N$timeSinceApp <- soilGrApp.N$timeSinceApp.N
soilGrApp.T$timeSinceApp <- soilGrApp.T$timeSinceApp.T
soilGrApp.S$timeSinceApp <- soilGrApp.S$timeSinceApp.S
dropAppDates <- c("timeSinceApp.NoSo", "timeSinceApp.N", "timeSinceApp.T", "timeSinceApp.S")
soilGrApp.N <- soilGrApp.N[ , !(names(soilGrApp.N) %in% dropAppDates)]
soilGrApp.T <- soilGrApp.T[ , !(names(soilGrApp.T) %in% dropAppDates)]
soilGrApp.S <- soilGrApp.S[ , !(names(soilGrApp.S) %in% dropAppDates)]
soilGrApp <- rbind(soilGrApp.N, soilGrApp.T)
soilGrApp <- rbind(soilGrApp, soilGrApp.S)
p <- ggplot(data = soilGrApp, aes(x=Conc.mug.g.dry.soil, y=DD13C.comp))+
geom_errorbar(aes(ymin = DD13C.comp - comp.d13C.SD, ymax = DD13C.comp + comp.d13C.SD)) +
geom_errorbarh(aes(xmin = Conc.mug.g.dry.soil - Conc.ComSoil.SD, xmax = Conc.mug.g.dry.soil + Conc.ComSoil.SD)) +
stat_smooth(data = subset(soilGrApp, Conc.mug.g.dry.soil < 8),
aes(x=Conc.mug.g.dry.soil, y=DD13C.comp), method = "lm", formula = y ~ poly(x, 2), se=F) +
# geom_point(aes(group = ID, size = timeSinceApp.NoSo)) + # , colour = Source)) +  # , shape = ngC.Label)) +
geom_point(aes(group = ID, size = timeSinceApp)) +
theme_bw() +
theme(legend.position = "bottom") +
labs(size="   Days after application", colour="Source" ) + #, shape = "Mass Carbon") +
ylab(expression(paste({Delta~delta}^"13","C", ' (\u2030)'))) +
xlab(expression(paste("S-MET Soil Concentration  ", {({mu}*g / g~dry~wt.)}))) +
annotate("text", x = 5.5, y = 3.7, label = as.character(r_label), parse = T, size = 3.5) +
annotate("text", x = 5.5, y = 3.2, label = p_label, parse = T, size = 3.5) +
scale_size_continuous(range = c(1, 5), breaks= c(0, 10, 20, 30, 50), limits = c(0, 50)) +
# scale_size_continuous(range = c(1, 5)) +
guides(size=guide_legend(nrow=1))
#scale_color_hue("Group") +
#scale_fill_manual(
#  "CI horizontal line", values=rep(1,4),
#  guide=guide_legend(override.aes = list(colour=c("orange", "darkred"))),
#  labels=c("CI of 95%", "CI of 99%")
#)
#geom_text_repel(data = subset(soilGrApp, (!is.na(ngC.Label) & Wnum > 10) ), aes(label=Wnum),
#               arrow = arrow(length = unit(0.005, 'npc'), type = "closed"),
#               force = 1,
#               point.padding = unit(1.0, 'lines'),
#               max.iter = 2e3,
#               nudge_x = .2)
p
#ggsave(p, filename = "images/DDvsConc_soils.png", width = 8, height = 5, units = "in", scale = 1)
#ggplotly(p)
#stat_smooth(method = "lm", formula = y ~ poly(x, 2)) +
#stat_smooth(method = "lm", formula = y~x, se=F)
ggsave(p, filename = "images/DDvsConc_soils.png", width = 8, height = 5, units = "in", scale = 1)
shiny::runApp('Documents/PhD/InteractiveApps/Alteck-app')
shiny::runApp('Documents/PhD/InteractiveApps/Alteck-app')
runApp('Documents/PhD/InteractiveApps/Alteck-app')
runApp('Documents/PhD/InteractiveApps/Alteck-app')
runApp('Documents/PhD/InteractiveApps/Alteck-app')
runApp('Documents/PhD/InteractiveApps/Alteck-app')
runApp('Documents/PhD/InteractiveApps/Alteck-app')
runApp('Documents/PhD/InteractiveApps/Alteck-app')
shiny::runApp('Documents/PhD/InteractiveApps/Alteck-app')
setwd("/Users/DayTightChunks/Documents/PhD/InteractiveApps/Alteck-app")
hydro <- read.csv2("data/groupAlteck2016_R.csv")
hydro$Date = as.POSIXct(strptime(hydro$Date, "%Y-%m-%d %H:%M", tz="EST"))
hydro$Weeks = as.factor(as.character(hydro$Weeks))
hydro = hydro[, c("Date",
"sampleQ", "Type",
"Q.HW1", "Rain12min.mm",
"Weeks", "SubWeeks", "WeekNo")]
hydro$Rain12min.mm <- ifelse(hydro$Rain12min.mm = 0, 0.0, hydro$Rain12min.mm)
class(hydro$Rain12min.mm)
hydro$Rain12min.mm <- ifelse(hydro$Rain12min.mm == 0, 0.0, hydro$Rain12min.mm)
class(hydro$Rain12min.mm)
View(hydro)
hydro$Rain12min.mm[1]
hydro$Rain12min.mm[1] <- 0.2
hydro$Rain12min.mm[1]
runApp()
runApp()
